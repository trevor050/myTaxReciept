
'use client';

import * as React from 'react';
import {
  Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription,
  DialogFooter, DialogClose,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { AlertTriangle, Copy, Send } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { SUBJECT } from '@/services/email/generator';
import type { Tone } from '@/services/email/types';

interface PromptTooLongModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  promptText: string;
  aiModelName: string;
  aiModelUrlWithoutPrompt: string;
  onEmailGenerated: () => void;
  userName: string;
  userLocation: string;
  tone: Tone;
}

export default function PromptTooLongModal({
  isOpen,
  onOpenChange,
  promptText,
  aiModelName,
  aiModelUrlWithoutPrompt,
  onEmailGenerated,
  userName,
  userLocation,
  tone,
}: PromptTooLongModalProps) {
  const { toast } = useToast();

  const handleCopyToClipboardAndOpen = async () => {
    try {
      await navigator.clipboard.writeText(promptText);
      toast({
        title: 'Prompt Copied!',
        description: `The prompt for ${aiModelName} has been copied to your clipboard.`,
        duration: 5000,
      });
      window.open(aiModelUrlWithoutPrompt, '_blank');
      onOpenChange(false); // Close this modal
      onEmailGenerated(); // Trigger same actions as if email was directly opened
    } catch (err) {
      console.error('Failed to copy prompt: ', err);
      toast({
        title: 'Copy Failed',
        description: 'Could not copy the prompt. Please try again or copy manually from the console if needed.',
        variant: 'destructive',
      });
    }
  };

  const handleOpenEmailClientForPasting = () => {
    const genericSubject = SUBJECT[tone] || SUBJECT[0];
    const placeholderBody = `Hello [Representative Name],\n\nI am writing to you today regarding federal budget priorities.\n\n[Please paste the email body generated by ${aiModelName} here.]\n\nThank you for your time and consideration.\n\nSincerely,\n${userName || '[Your Name]'}\n${userLocation || '[Your Location]'}`;
    window.location.href = `mailto:?subject=${encodeURIComponent(genericSubject)}&body=${encodeURIComponent(placeholderBody)}`;
    onOpenChange(false);
    onEmailGenerated();
  }


  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md data-[state=open]:animate-scaleIn data-[state=closed]:animate-scaleOut">
        <DialogHeader className="text-left">
          <DialogTitle className="flex items-center gap-2 text-lg font-semibold">
            <AlertTriangle className="h-5 w-5 text-amber-500" />
            Prompt May Be Too Long
          </DialogTitle>
          <DialogDescription className="text-sm text-muted-foreground pt-1">
            The generated prompt ({promptText.length} characters) might be too long for direct use in a URL with {aiModelName}.
            This can sometimes cause issues when opening the AI provider&apos;s website.
          </DialogDescription>
        </DialogHeader>

        <div className="py-4 space-y-3 text-sm">
            <p>
                We recommend copying the prompt and pasting it manually into <strong>{aiModelName}</strong> after it opens.
            </p>
            <p>
                Alternatively, after {aiModelName} generates the email content, you can click the button below to open your email client with a placeholder, then paste the AI-generated text there.
            </p>
        </div>

        <DialogFooter className="flex-col sm:flex-row gap-2 sm:justify-end">
          <DialogClose asChild>
            <Button type="button" variant="outline">
              Cancel
            </Button>
          </DialogClose>
          <Button type="button" onClick={handleCopyToClipboardAndOpen} className="bg-amber-500 hover:bg-amber-600 text-white">
            <Copy className="mr-2 h-4 w-4" /> Copy Prompt & Open {aiModelName}
          </Button>
           <Button type="button" onClick={handleOpenEmailClientForPasting} variant="secondary">
            <Send className="mr-2 h-4 w-4" /> Open Email Client for Pasting
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
